DT::dataTableOutput("data_table")
#hover = hoverOpts(id ="plot_hover"),
#uiOutput("my_tooltip"))
))
)
)
#------------------------------------------------------------------------------#
##server script
#------------------------------------------------------------------------------#
server <- shinyServer(function(input, output) {
#------------------------------------------------------------------------------#
##product page
#------------------------------------------------------------------------------#
output$product_plot <- renderPlotly({
selected = average_rating_select[average_rating_select$name == input$select_product,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth() + xlab("Month") + ylab("Average Rating")
ggplotly(p, height = 400)
})
output$product_review_analysis <- renderPlot({
product = sentiment_df[sentiment_df$name == input$select_product,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie <- renderPlot({
product_recommend <- electron_data[electron_data$name == input$select_product, 'reviews.doRecommend']
product_recommend[is.na(product_recommend)] <- "NA"
product_recommend <- data.frame(product_recommend)
par(mar=c(0,0,0,0))
#pie(table(product_recommend, exclude = NULL), col = c("pink", "grey", "light green"))
p <- ggplot(product_recommend, aes(x='', fill=product_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar <- renderPlot({
par(mar=c(0,0,0,0))
product_rating <- electron_data[electron_data$name == input$select_product, 'reviews.rating']
product_rating <- product_rating[!is.na(product_rating)]
product_rating <- data.frame(product_rating)
p <- ggplot(product_rating, aes(x=product_rating)) +
geom_bar(fill=unique(product_rating$product_rating))
p
})
#------------------------------------------------------------------------------#
##brand page
#------------------------------------------------------------------------------#
output$brand_plot <- renderPlotly({
selected = average_rating_select2[average_rating_select2$brand == input$select_brand,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth()
ggplotly(p, height = 400)
})
output$brand_review_analysis <- renderPlot({
product = sentiment_df_brand[sentiment_df_brand$brand == input$select_brand,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie2 <- renderPlot({
brand_recommend <- electron_data[electron_data$brand == input$select_brand, 'reviews.doRecommend']
brand_recommend[is.na(brand_recommend)] <- "NA"
brand_recommend <- data.frame(brand_recommend)
par(mar=c(0,0,0,0))
p <- ggplot(brand_recommend, aes(x='', fill=brand_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar2 <- renderPlot({
par(mar=c(0,0,0,0))
brand_rating <- electron_data[electron_data$brand == input$select_brand, 'reviews.rating']
brand_rating <- brand_rating[!is.na(brand_rating)]
brand_rating <- data.frame(brand_rating)
p <- ggplot(brand_rating, aes(x=brand_rating)) +
geom_bar(fill=unique(brand_rating$brand_rating))
p
})
#------------------------------------------------------------------------------#
##comparison page
#------------------------------------------------------------------------------#
output$product_comparison <- renderPlotly({
ggplotly(sentiment_plot_product)
})
output$brand_comparison <- renderPlotly({
ggplotly(sentiment_plot_product)
})
#------------------------------------------------------------------------------#
##data page
#------------------------------------------------------------------------------#
options_new <- list(columnDefs = list(list(
targets = "_all",
render = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 20 ?",
"'<span title=\"' + data + '\">' + data.substr(0, 20) + '...</span>' : data;",
"}")
)))
output$data_table = renderDT(electron_data,
options = options_new, server = TRUE)
})
shinyApp(ui, server)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Amazon Electronic Product Data Analysis"),
navbarPage(
"Menu",
tabPanel("Overview"),
tabPanel("Product",
sidebarLayout(
sidebarPanel(
width = 3,
#textInput("title", "Plot title:", value = "x v y"),
fluidRow(selectInput("select_product", "Select a Product:", choices = product_name, selected = "Microsoft Surface Pro 4 Type Cover with Fingerprint ID"),
div(style = "height:0px;"))
# fluidRow(radioButtons("plot_type", "Plot Type", choices = c("Time Series", "User Review Highlight"), selected = "Time Series"),
#          div(style = "height:50px;"))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
id = "inTabset",
tabPanel(title = "General", value = "panel1",
fluidRow(h3("Genenral Overview for Selected Product"),
h4("Popularity Over Time"),
plotlyOutput(outputId = "product_plot")),
fluidRow(
class = "myRow2",
div(style = "margin-top:2em"),
column(width = 6, h4("User DoRecommend"), plotOutput(outputId = "pie")),
column(width = 6, h4("Rating Distribution"), plotOutput(outputId = "bar"))
)
),
tabPanel(title = "User Review Text Highlight", value = "panel2", plotOutput(outputId = "product_review_analysis"))
)
)
)),
tabPanel("Brand",
sidebarLayout(
sidebarPanel(
width = 3,
fluidRow(selectInput("select_brand", "Select a Brand:", choices = brand_name, selected = "Microsoft"),
div(style = "height:0px;"))
),
mainPanel(
tabsetPanel(
id = "inTabset2",
tabPanel(title = "General", value = "brand_panel1",
fluidRow(h3("Genenral Overview for Selected Brand"),
h4("Popularity Over Time"),
plotlyOutput(outputId = "brand_plot")),
fluidRow(
div(style = "margin-top:2em"),
column(width = 6, h4("User DoRecommend"), plotOutput(outputId = "pie2")),
column(width = 6, h4("Rating Distribution"), plotOutput(outputId = "bar2"))
)
),
tabPanel(title = "User Review Text Highlight", value = "brand_panel2", plotOutput(outputId = "brand_review_analysis"))
)
)
)
),
tabPanel("Comparison",
fluidRow(column(width = 12,
h3("Comparison by Product"),
plotlyOutput(outputId = "product_comparison"),
h3("Comparison by Brand"),
plotlyOutput(outputId = "brand_comparison")
))
),
tabPanel("Data",
DT::dataTableOutput("data_table")
#hover = hoverOpts(id ="plot_hover"),
#uiOutput("my_tooltip"))
))
)
)
#------------------------------------------------------------------------------#
##server script
#------------------------------------------------------------------------------#
server <- shinyServer(function(input, output) {
#------------------------------------------------------------------------------#
##product page
#------------------------------------------------------------------------------#
output$product_plot <- renderPlotly({
selected = average_rating_select[average_rating_select$name == input$select_product,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth() + xlab("Month") + ylab("Average Rating")
ggplotly(p, height = 400)
})
output$product_review_analysis <- renderPlot({
product = sentiment_df[sentiment_df$name == input$select_product,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie <- renderPlot({
product_recommend <- electron_data[electron_data$name == input$select_product, 'reviews.doRecommend']
product_recommend[is.na(product_recommend)] <- "NA"
product_recommend <- data.frame(product_recommend)
par(mar=c(0,0,0,0))
#pie(table(product_recommend, exclude = NULL), col = c("pink", "grey", "light green"))
p <- ggplot(product_recommend, aes(x='', fill=product_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar <- renderPlot({
par(mar=c(0,0,0,0))
product_rating <- electron_data[electron_data$name == input$select_product, 'reviews.rating']
product_rating <- product_rating[!is.na(product_rating)]
product_rating <- data.frame(product_rating)
p <- ggplot(product_rating, aes(x=product_rating)) +
geom_bar(fill=unique(product_rating$product_rating))
p
})
#------------------------------------------------------------------------------#
##brand page
#------------------------------------------------------------------------------#
output$brand_plot <- renderPlotly({
selected = average_rating_select2[average_rating_select2$brand == input$select_brand,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth()
ggplotly(p, height = 400)
})
output$brand_review_analysis <- renderPlot({
product = sentiment_df_brand[sentiment_df_brand$brand == input$select_brand,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie2 <- renderPlot({
brand_recommend <- electron_data[electron_data$brand == input$select_brand, 'reviews.doRecommend']
brand_recommend[is.na(brand_recommend)] <- "NA"
brand_recommend <- data.frame(brand_recommend)
par(mar=c(0,0,0,0))
p <- ggplot(brand_recommend, aes(x='', fill=brand_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar2 <- renderPlot({
par(mar=c(0,0,0,0))
brand_rating <- electron_data[electron_data$brand == input$select_brand, 'reviews.rating']
brand_rating <- brand_rating[!is.na(brand_rating)]
brand_rating <- data.frame(brand_rating)
p <- ggplot(brand_rating, aes(x=brand_rating)) +
geom_bar(fill=unique(brand_rating$brand_rating))
p
})
#------------------------------------------------------------------------------#
##comparison page
#------------------------------------------------------------------------------#
output$product_comparison <- renderPlotly({
ggplotly(sentiment_plot_product)
})
output$brand_comparison <- renderPlotly({
ggplotly(sentiment_plot_brand)
})
#------------------------------------------------------------------------------#
##data page
#------------------------------------------------------------------------------#
options_new <- list(columnDefs = list(list(
targets = "_all",
render = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 20 ?",
"'<span title=\"' + data + '\">' + data.substr(0, 20) + '...</span>' : data;",
"}")
)))
output$data_table = renderDT(electron_data,
options = options_new, server = TRUE)
})
shinyApp(ui, server)
#two y axis plot product
my_text = get_sentences(as.character(electron_data$reviews.text))
sen_text = sentiment_by(my_text)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Amazon Electronic Product Data Analysis"),
navbarPage(
"Menu",
tabPanel("Overview"),
tabPanel("Product",
sidebarLayout(
sidebarPanel(
width = 3,
#textInput("title", "Plot title:", value = "x v y"),
fluidRow(selectInput("select_product", "Select a Product:", choices = product_name, selected = "Microsoft Surface Pro 4 Type Cover with Fingerprint ID"),
div(style = "height:0px;"))
# fluidRow(radioButtons("plot_type", "Plot Type", choices = c("Time Series", "User Review Highlight"), selected = "Time Series"),
#          div(style = "height:50px;"))
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
id = "inTabset",
tabPanel(title = "General", value = "panel1",
fluidRow(h3("Genenral Overview for Selected Product"),
h4("Popularity Over Time"),
plotlyOutput(outputId = "product_plot")),
fluidRow(
class = "myRow2",
div(style = "margin-top:2em"),
column(width = 6, h4("User DoRecommend"), plotOutput(outputId = "pie")),
column(width = 6, h4("Rating Distribution"), plotOutput(outputId = "bar"))
)
),
tabPanel(title = "User Review Text Highlight", value = "panel2", plotOutput(outputId = "product_review_analysis"))
)
)
)),
tabPanel("Brand",
sidebarLayout(
sidebarPanel(
width = 3,
fluidRow(selectInput("select_brand", "Select a Brand:", choices = brand_name, selected = "Microsoft"),
div(style = "height:0px;"))
),
mainPanel(
tabsetPanel(
id = "inTabset2",
tabPanel(title = "General", value = "brand_panel1",
fluidRow(h3("Genenral Overview for Selected Brand"),
h4("Popularity Over Time"),
plotlyOutput(outputId = "brand_plot")),
fluidRow(
div(style = "margin-top:2em"),
column(width = 6, h4("User DoRecommend"), plotOutput(outputId = "pie2")),
column(width = 6, h4("Rating Distribution"), plotOutput(outputId = "bar2"))
)
),
tabPanel(title = "User Review Text Highlight", value = "brand_panel2", plotOutput(outputId = "brand_review_analysis"))
)
)
)
),
tabPanel("Comparison",
fluidRow(column(width = 12,
h3("Comparison by Product"),
plotlyOutput(outputId = "product_comparison"),
h3("Comparison by Brand"),
plotlyOutput(outputId = "brand_comparison")
))
),
tabPanel("Data",
DT::dataTableOutput("data_table")
#hover = hoverOpts(id ="plot_hover"),
#uiOutput("my_tooltip"))
))
)
)
#------------------------------------------------------------------------------#
##server script
#------------------------------------------------------------------------------#
server <- shinyServer(function(input, output) {
#------------------------------------------------------------------------------#
##product page
#------------------------------------------------------------------------------#
output$product_plot <- renderPlotly({
selected = average_rating_select[average_rating_select$name == input$select_product,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth() + xlab("Month") + ylab("Average Rating")
ggplotly(p, height = 400)
})
output$product_review_analysis <- renderPlot({
product = sentiment_df[sentiment_df$name == input$select_product,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie <- renderPlot({
product_recommend <- electron_data[electron_data$name == input$select_product, 'reviews.doRecommend']
product_recommend[is.na(product_recommend)] <- "NA"
product_recommend <- data.frame(product_recommend)
par(mar=c(0,0,0,0))
#pie(table(product_recommend, exclude = NULL), col = c("pink", "grey", "light green"))
p <- ggplot(product_recommend, aes(x='', fill=product_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar <- renderPlot({
par(mar=c(0,0,0,0))
product_rating <- electron_data[electron_data$name == input$select_product, 'reviews.rating']
product_rating <- product_rating[!is.na(product_rating)]
product_rating <- data.frame(product_rating)
p <- ggplot(product_rating, aes(x=product_rating)) +
geom_bar(fill=unique(product_rating$product_rating))
p
})
#------------------------------------------------------------------------------#
##brand page
#------------------------------------------------------------------------------#
output$brand_plot <- renderPlotly({
selected = average_rating_select2[average_rating_select2$brand == input$select_brand,]
p <- ggplot(selected,
aes(x=month, y=average.rating)) +
geom_line() + stat_smooth()
ggplotly(p, height = 400)
})
output$brand_review_analysis <- renderPlot({
product = sentiment_df_brand[sentiment_df_brand$brand == input$select_brand,]
tidy_table <- product %>% group_by(month = floor_date(review_date, unit = "month")) %>% summarise(ave_review_text_scores = sum(text_scores)/n(), ave_rating = sum(rating)/n())
tidy_table = data.frame(tidy_table)
p <- ggplot(tidy_table, aes(x = month))
p <- p + geom_line(aes(y = ave_review_text_scores, colour = "Sentimental Scores"))
p <- p + geom_line(aes(y = ave_rating/13, colour = "Ave_rating"))
p <- p + scale_y_continuous(sec.axis = sec_axis(~.*13, name = "Average Rate stars"))
p <- p + scale_colour_manual(values = c("blue", "red"))
p <- p + labs(y = "Sentimental Scores",
x = "Month",
colour = "Parameter")
p <- p + theme(legend.position = c(0.8, 0.9))
p
})
output$pie2 <- renderPlot({
brand_recommend <- electron_data[electron_data$brand == input$select_brand, 'reviews.doRecommend']
brand_recommend[is.na(brand_recommend)] <- "NA"
brand_recommend <- data.frame(brand_recommend)
par(mar=c(0,0,0,0))
p <- ggplot(brand_recommend, aes(x='', fill=brand_recommend)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y", start = 0) + theme(legend.position="top",axis.title=element_blank(),axis.ticks = element_blank())
p
})
output$bar2 <- renderPlot({
par(mar=c(0,0,0,0))
brand_rating <- electron_data[electron_data$brand == input$select_brand, 'reviews.rating']
brand_rating <- brand_rating[!is.na(brand_rating)]
brand_rating <- data.frame(brand_rating)
p <- ggplot(brand_rating, aes(x=brand_rating)) +
geom_bar(fill=unique(brand_rating$brand_rating))
p
})
#------------------------------------------------------------------------------#
##comparison page
#------------------------------------------------------------------------------#
output$product_comparison <- renderPlotly({
ggplotly(sentiment_plot_product)
})
output$brand_comparison <- renderPlotly({
ggplotly(sentiment_plot_brand)
})
#------------------------------------------------------------------------------#
##data page
#------------------------------------------------------------------------------#
options_new <- list(columnDefs = list(list(
targets = "_all",
render = JS(
"function(data, type, row, meta) {",
"return type === 'display' && data.length > 20 ?",
"'<span title=\"' + data + '\">' + data.substr(0, 20) + '...</span>' : data;",
"}")
)))
output$data_table = renderDT(electron_data,
options = options_new, server = TRUE)
})
shinyApp(ui, server)
